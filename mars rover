#when you're done with the program just get it to use numbers for directions mod 4

class Rover
	attr_accessor :X, :Y, :direction
	def initialize(X, Y)
		@world_width = X
		@world_height = Y
	end

	def set_position(X, Y, direction)

		@X = X
		@Y = Y
		@direction = direction
	end


	def move
		case @direction
		when "N"
			@Y +=1
		when "S"
			@Y -=1
		when "E"
			@X +=1
		when "W"
			@X -=1
		else 
			raise  "error in your move, tried to use #{@direction} which is invalid"
		end
		#sanity check to make sure it's in-bounds
		@Y = [@Y, world_height].min
		@Y = [@Y, 0].max
		@X = [@X, world_width].min
		@Y = [@X, 0].max
	end

	def turn(direction)
		d = @direction.tr("NESW", "0123").to_i
		if direction == "L"
			d = (d-1) % 4
		elsif direction == "R"
			d = (d+1) % 4
		else 
			raise "your direction is neither L or R it is #{direction}"
		end
		@direction = d.to_s.tr("0123", "NESW")
	end

	def position
		"#{X} #{Y} #{direction}"
	end
			
	def read_instruction(instruction)
			case instruction
			when "M"
				move
			when "L"
				turn_left
			when "R"
				turn_right
			else 
				raise "invalid instruction #{instruction} in read_instruction"
			end
		end
	end
end

puts "Please enter the world height"
world_height, world_width = gets.chomp.split(" ").map { |s| s.to_i }
mars_rover = Rover.new(world_width, world_height)
loop do
	puts "enter the starting position of the rover"
	x, y, direction = gets.chomp.split(" ")
	x = x.to_i
	y = y.to_i
	mars_rover.set_position(x, y, direction)
	puts "enter rover commands pls"
	instructions = gets.chomp
	instructions.each_char do |character|
		mars_rover.read_instruction(character)
		end
	puts "#{mars_rover.position}"
end


	



